const parseDate = isoStr => isoStr ? new Date(isoStr + 'T00:00:00') : null;
const daysBetweenInclusive = (start, end) => {
  const s = new Date(start.getFullYear(), start.getMonth(), start.getDate());
  const e = new Date(end.getFullYear(), end.getMonth(), end.getDate());
  const diff = e.getTime() - s.getTime();
  return Math.max(0, Math.floor(diff / (1000*60*60*24)) + 1);
};
const intersectRange = (aStart, aEnd, bStart, bEnd) => {
  const start = aStart > bStart ? aStart : bStart;
  const end = aEnd < bEnd ? aEnd : bEnd;
  return start <= end ? { start, end } : null;
};
const daysInPeriod = (a,b) => daysBetweenInclusive(a,b);
const applyDiscount = (v,p) => Math.max(0, v * (1 - Math.max(0, Math.min(100, p)) / 100));
const isPositiveNumber = n => typeof n === 'number' && !Number.isNaN(n) && isFinite(n) && n >= 0;
const isValidDateString = s => { if (!s) return false; const d = parseDate(s); return d instanceof Date && !isNaN(d.getTime()); };
const validateSubscriptionInput = ({name,price,start,end}) => {
  if (!name || String(name).trim().length === 0) return {ok:false,message:'Nome inválido'};
  if (!isPositiveNumber(price)) return {ok:false,message:'Preço inválido'};
  if (!isValidDateString(start)) return {ok:false,message:'Data início inválida'};
  if (end && !isValidDateString(end)) return {ok:false,message:'Data fim inválida'};
  if (start && end && parseDate(start) > parseDate(end)) return {ok:false,message:'Início > fim'};
  return {ok:true};
};
let state = { subscriptions: [] };
const createSubscription = ({id,name,startISO,endISO=null,price}) => ({id,name,startISO,endISO,priceEvents:[{dateISO:startISO,price}],promos:[],createdAtISO:(new Date()).toISOString()});
const addPriceEvent = (sub,{dateISO,price,note=''}) => ({...sub,priceEvents:[...sub.priceEvents,{dateISO,price,note}].sort((a,b)=>new Date(a.dateISO)-new Date(b.dateISO))});
const addPromo = (sub,{startISO,endISO,pct}) => ({...sub,promos:[...sub.promos,{startISO,endISO,pct}].sort((a,b)=>new Date(a.startISO)-new Date(b.startISO))});
const buildPriceSegmentsForPeriod = (priceEvents,periodStart,periodEnd)=>priceEvents.map(pe=>({date:parseDate(pe.dateISO),price:pe.price})).map((ev,i,arr)=>{const segStart=ev.date;const next=arr[i+1];const segEnd=next?new Date(next.date.getFullYear(),next.date.getMonth(),next.date.getDate()-1):new Date(9999,11,31);return{start:segStart,end:segEnd,price:ev.price};}).map(seg=>{const inter=intersectRange(seg.start,seg.end,periodStart,periodEnd);return inter?{start:inter.start,end:inter.end,price:seg.price}:null;}).filter(Boolean);
const revenueForSegmentWithPromos=(seg,promos,billingDays)=>{const segDays=daysBetweenInclusive(seg.start,seg.end);const baseAmount=seg.price*(segDays/billingDays);if(!promos||promos.length===0)return Math.max(0,baseAmount);const promoParts=promos.map(p=>{const inter=intersectRange(seg.start,seg.end,parseDate(p.startISO),parseDate(p.endISO));if(!inter)return null;const d=daysBetweenInclusive(inter.start,inter.end);const partBase=seg.price*(d/billingDays);const partAfter=applyDiscount(partBase,p.pct);return{d,partAfter};}).filter(Boolean);const discountedSum=promoParts.reduce((s,p)=>s+p.partAfter,0);const discountedDays=promoParts.reduce((s,p)=>s+p.d,0);const nonDiscDays=Math.max(0,segDays-discountedDays);const nonDiscAmount=seg.price*(nonDiscDays/billingDays);return Math.max(0,discountedSum+nonDiscAmount);};
const computeSubscriptionRevenue=(sub,periodStart,periodEnd)=>{const s=parseDate(sub.startISO);const e=sub.endISO?parseDate(sub.endISO):new Date(9999,11,31);const overl=intersectRange(s,e,periodStart,periodEnd);if(!overl)return 0;const billingDays=daysInPeriod(periodStart,periodEnd);if(billingDays<=0)return 0;const segments=buildPriceSegmentsForPeriod(sub.priceEvents,periodStart,periodEnd);const rev=segments.map(seg=>revenueForSegmentWithPromos(seg,sub.promos,billingDays)).reduce((s,v)=>s+v,0);return Math.max(0,rev);};
const computeTotalRevenue=(subs,a,b)=>subs.map(s=>computeSubscriptionRevenue(s,a,b)).reduce((s,v)=>s+v,0);
const computeARPU=(subs,a,b)=>{const act=subs.filter(s=>intersectRange(parseDate(s.startISO),s.endISO?parseDate(s.endISO):new Date(9999,11,31),a,b));const tot=computeTotalRevenue(subs,a,b);return act.length===0?0:tot/act.length;};
const computeChurn=(subs,a,b)=>{const start=a;const atStart=subs.filter(s=>parseDate(s.startISO)<=start&&(!s.endISO||parseDate(s.endISO)>=start));const canceled=atStart.filter(s=>s.endISO&&parseDate(s.endISO)>=a&&parseDate(s.endISO)<=b);return atStart.length===0?0:canceled.length/atStart.length;};
const $=id=>document.getElementById(id);
const renderSubscriptionsList=subs=>{const c=$('subscriptionsList');if(subs.length===0){c.innerHTML='<div class="muted">Nenhuma assinatura.</div>';updateSelects([]);return;}c.innerHTML=subs.map(s=>{const end=s.endISO?s.endISO:'<span class="muted">ativo</span>';const events=s.priceEvents.map(e=>`${e.dateISO}→R$${Number(e.price).toFixed(2)}`).join('<br/>');const promos=s.promos.map(p=>`${p.startISO}→${p.endISO} (${p.pct}%)`).join('<br/>')||'<span class="muted">—</span>';return`<div style="padding:10px;border-radius:8px;margin-bottom:8px;background:rgba(255,255,255,0.015)"><strong>${s.name}</strong><div class="muted">(${s.id})</div><div>Período: ${s.startISO} → ${end}</div><div>Eventos:<br/>${events}</div><div>Promoções:<br/>${promos}</div></div>`;}).join('');updateSelects(subs);};
const updateSelects=subs=>{['selSubForChange','selSubForPromo'].forEach(id=>{$(id).innerHTML=subs.length===0?'<option value="">—</option>':subs.map(s=>`<option value="${s.id}">${s.name}</option>`).join('');});};
const nextId=()=>`S${Math.random().toString(36).slice(2,9)}`;
$('btnAddSub').addEventListener('click',()=>{const name=$('inpName').value.trim();const price=Number($('inpPrice').value);const start=$('inpStart').value;const end=$('inpEnd').value||null;const val=validateSubscriptionInput({name,price,start,end});if(!val.ok){alert(val.message);return;}const id=nextId();const sub=createSubscription({id,name,startISO:start,endISO:end,price});state={...state,subscriptions:[...state.subscriptions,sub]};renderSubscriptionsList(state.subscriptions);$('inpName').value=$('inpPrice').value=$('inpStart').value=$('inpEnd').value='';});
$('btnClear').addEventListener('click',()=>{$('inpName').value=$('inpPrice').value=$('inpStart').value=$('inpEnd').value='';});
$('btnAddChange').addEventListener('click',()=>{const sel=$('selSubForChange').value;if(!sel){alert('Selecione assinatura');return;}const d=$('inpChangeDate').value;const p=Number($('inpNewPrice').value);const n=$('inpChangeNote').value;if(!isValidDateString(d)||!isPositiveNumber(p)){alert('Dados inválidos');return;}const sub=state.subscriptions.find(s=>s.id===sel);const upd=addPriceEvent(sub,{dateISO:d,price:p,note:n});state={...state,subscriptions:state.subscriptions.map(s=>s.id===sel?upd:s)};renderSubscriptionsList(state.subscriptions);$('inpChangeDate').value=$('inpNewPrice').value=$('inpChangeNote').value='';});
$('btnAddPromo').addEventListener('click',()=>{const sel=$('selSubForPromo').value;if(!sel){alert('Selecione assinatura');return;}const pct=Number($('inpPromoPct').value);const start=$('inpPromoStart').value;const end=$('inpPromoEnd').value;if(!isPositiveNumber(pct)||!isValidDateString(start)||!isValidDateString(end)){alert('Dados inválidos');return;}if(parseDate(start)>parseDate(end)){alert('Início > fim');return;}const sub=state.subscriptions.find(s=>s.id===sel);const upd=addPromo(sub,{startISO:start,endISO:end,pct});state={...state,subscriptions:state.subscriptions.map(s=>s.id===sel?upd:s)};renderSubscriptionsList(state.subscriptions);$('inpPromoPct').value=$('inpPromoStart').value=$('inpPromoEnd').value='';});
$('btnCompute').addEventListener('click',()=>{const ps=$('inpPeriodStart').value;const pe=$('inpPeriodEnd').value;if(!isValidDateString(ps)||!isValidDateString(pe)){alert('Período inválido');return;}const a=parseDate(ps),b=parseDate(pe);if(a>b){alert('Início > fim');return;}const details=state.subscriptions.map(s=>({id:s.id,name:s.name,revenue:computeSubscriptionRevenue(s,a,b)}));const total=computeTotalRevenue(state.subscriptions,a,b);const arpu=computeARPU(state.subscriptions,a,b);const churn=computeChurn(state.subscriptions,a,b);$('resultsCard').style.display='block';const sd=daysInPeriod(a,b);$('summaryArea').innerHTML=`<div class="metrics"><div class="metric"><div class="muted">Período</div><strong>${ps}→${pe}</strong></div><div class="metric"><div class="muted">Dias</div><strong>${sd}</strong></div><div class="metric"><div class="muted">Receita Total</div><strong>R$${total.toFixed(2)}</strong></div><div class="metric"><div class="muted">ARPU</div><strong>R$${arpu.toFixed(2)}</strong></div><div class="metric"><div class="muted">Churn</div><strong>${(churn*100).toFixed(2)}%</strong></div></div>`;$('detailsArea').innerHTML=$('selShowDetails').value==='yes'?`<table><thead><tr><th>Assinante</th><th>Receita (R$)</th></tr></thead><tbody>${details.map(d=>`<tr><td>${d.name}</td><td>R$${d.revenue.toFixed(2)}</td></tr>`).join('')}</tbody></table>`:'';});
$('btnResetAll').addEventListener('click',()=>{if(!confirm('Resetar tudo?'))return;state={subscriptions:[]};renderSubscriptionsList(state.subscriptions);$('resultsCard').style.display='none';});
renderSubscriptionsList(state.subscriptions);
(function(){const ex1=createSubscription({id:'S100',name:'Ana',startISO:'2025-09-05',price:29.9});const ex1b=addPriceEvent(ex1,{dateISO:'2025-10-10',price:39.9});const ex1c=addPromo(ex1b,{startISO:'2025-10-15',endISO:'2025-10-20',pct:50});const ex2=createSubscription({id:'S101',name:'Bruno',startISO:'2025-09-01',endISO:'2025-10-05',price:19.9});state={...state,subscriptions:[...state.subscriptions,ex1c,ex2]};renderSubscriptionsList(state.subscriptions);})();
